/**
@description Case creation for account deletion request and account access request by patients
History:
Version    Author               Date              Detail         Description
1.0        Divya Bharathi S     6-Dec-2023        Created        Initial development
1.1        Divya Bharathi S     08-Apr-2024       Updated        Add null check
1.2        Divya Bharathi S     18-Apr-2024       Updated        Add Log
*/
public with sharing class BI_PSPB_CaseDeletionCtrl {


    /**
    @description This method creates a case for account deletion based on the user's role.
    This method is used in biPspbPatientProfiledetails and biPspbCgPatientinfo LWC component.
    */
/**
//     @description Creates a Case record for the current user based on related accounts.
//                The method checks if the current user is a caregiver and retrieves related accounts accordingly.
//               It then creates and inserts Case records for each related account.
*/
    @AuraEnabled
public static void createCase() {
    try {
        String currentUserName = UserInfo.getName();
        String currentUserEmail = UserInfo.getUserEmail();

        User currentUser = getCurrentUser(currentUserName, currentUserEmail);
        List<Account> relatedAccounts = getRelatedAccounts(currentUser, currentUserName, currentUserEmail);

        if (relatedAccounts.isEmpty()) {
            BI_PSP_LogMessagesUtility.logError(BI_PSPB_ProfileManagerConstCtrl.accountMessage,BI_PSPB_ProfileManagerCtrl.class.toString(),FALSE, BI_PSPB_ProfileManagerConstCtrl.LOG_SEVERITY_ERROR);
        }

        Id recordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByName().get(BI_PSPB_ProfileManagerConstCtrl.caseRecordType).getRecordTypeId();
        if (String.isBlank(recordTypeId)) {
            BI_PSP_LogMessagesUtility.logError(BI_PSPB_ProfileManagerConstCtrl.insertError,BI_PSPB_ProfileManagerCtrl.class.toString(),TRUE, BI_PSPB_ProfileManagerConstCtrl.LOG_SEVERITY_ERROR);
        }

        List<Case> casesToInsert = createCases(relatedAccounts, currentUser.Id, recordTypeId);

        if (!casesToInsert.isEmpty()) {
            saveCases(casesToInsert);
        }

    } catch (Exception ex) {
        BI_PSPB_LogUtilities.exceptionLogMessage(BI_PSPB_ProfileManagerConstCtrl.insertError, BI_PSPB_CaseDeletionCtrl.class.toString(),ex);
    }
}
/** 
//  @description Retrieves the current user record based on the user's name and email.
//   @param currentUserName The name of the current user.
//   @param currentUserEmail The email of the current user.
//   @return The User record of the current user.
*/

// private static User getCurrentUser(String currentUserName, String currentUserEmail) {
//     return [SELECT Id, Name, Email, BI_PSPB_Caregiver__c
//             FROM User
//             WHERE Name = :currentUserName AND Email = :currentUserEmail
//             WITH USER_MODE
//             LIMIT 1];
// }

private static User getCurrentUser(String currentUserName, String currentUserEmail) {
    // Define the query fields and conditions
    String sObjectType = 'User'; // Ensure the sObject type is capitalized as 'User'
    String fields = 'Id, Name, Email, BI_PSPB_Caregiver__c';
    String conditions = 'Name = \'' + currentUserName + '\' AND Email = \'' + currentUserEmail + '\'';
    Boolean withUserMode = false;
    
    // Execute the query using the common query method
    List<SObject> results = BI_PSP_CommonQueryUtility.executeQuery(sObjectType, fields, conditions, withUserMode);
    
    // Return the first user or null if no user was found
    return results.isEmpty() ? null : (User)results[0];
}


/** 
//  @description Retrieves the related accounts for the current user. If the user is a caregiver, it retrieves the selected patient account.
//               Otherwise, it retrieves the accounts matching the user's email and name.
//  @param currentUser The current user record.
//  @param currentUserName The name of the current user.
//  @param currentUserEmail The email of the current user.
//  @return A list of related Account records.
*/

// Method to get related accounts based on the current user
private static List<Account> getRelatedAccounts(User currentUser, String currentUserName, String currentUserEmail) {
    List<Account> relatedAccounts = new List<Account>();

    // Check if the current user is a caregiver
    if (currentUser.BI_PSPB_Caregiver__c) {
        // Define fields and conditions for the first query
        String fields = 'Id, Name, PersonEmail, BI_PSPB_Selected_Patient_ID__c';
        String conditions = 'Name = \'' + currentUserName + 
                            '\' AND PersonEmail = \'' + currentUserEmail + 
                            '\' AND IsPersonAccount = TRUE AND BI_PSPB_Selected_Patient_ID__c != NULL';
        Boolean withUserMode = false; // Set this to true if you need to enforce user mode
        // Execute the query using the common query method
        List<SObject> selectedPatientAccounts = BI_PSP_CommonQueryUtility.executeQuery('Account', fields, conditions, withUserMode);
        
        // If accounts were found, get related accounts
        if (!selectedPatientAccounts.isEmpty()) {
            Account selectedAccount = (Account)selectedPatientAccounts[0];
            
            // Define fields and conditions for the second query
            String sObjectType = 'Account';
            fields = 'Id, Name, PersonEmail';
            conditions = 'Id = \'' + selectedAccount.BI_PSPB_Selected_Patient_ID__c + '\'';
            // Execute the query using the common query method
            List<SObject> relatedAccountResults = BI_PSP_CommonQueryUtility.executeQuery(sObjectType, fields, conditions, true);
            relatedAccounts.addAll((List<Account>)relatedAccountResults);
        }
    } else {
        // Define fields and conditions for the fallback query
        String sObjectType = 'Account';
        String fields = 'Id, Name, PersonEmail';
        String conditions = 'PersonEmail = \'' + currentUserEmail + 
                            '\' AND Name = \'' + currentUserName + '\'';
        Boolean withUserMode = false; // Set this to true if you need to enforce user mode
        // Execute the query using the common query method
        List<SObject> relatedAccountResults = BI_PSP_CommonQueryUtility.executeQuery(sObjectType, fields, conditions, withUserMode);
        relatedAccounts.addAll((List<Account>)relatedAccountResults);
    }

    return relatedAccounts;
}
/** 
//  @description Creates a list of Case records for the related accounts.
//  @param relatedAccounts The list of related accounts.
//  @param ownerId The owner Id for the Case records.
//  @param recordTypeId The record type Id for the Case records.
//  @return A list of Case records to be inserted.
*/

private static List<Case> createCases(List<Account> relatedAccounts, Id ownerId, Id recordTypeId) {
    List<Case> casesToInsert = new List<Case>();

    for (Account relatedAccount : relatedAccounts) {
        Case newCase = new Case();
        newCase.Subject = BI_PSPB_ProfileManagerConstCtrl.deletionReq;
        newCase.Description = BI_PSPB_ProfileManagerConstCtrl.deletionReq;
        newCase.BI_PSP_Type__c = BI_PSPB_ProfileManagerConstCtrl.deletionReq;
        newCase.Status = '';
        newCase.Origin = '';
        newCase.Priority = BI_PSPB_ProfileManagerConstCtrl.high;
        newCase.AccountId = relatedAccount.Id;
        newCase.OwnerId = ownerId;
        newCase.RecordTypeId = recordTypeId;
        casesToInsert.add(newCase);
    }

    return casesToInsert;
}
/** 
//   @description Saves the list of Case records and handles any errors that occur during the save operation.
//   @param casesToInsert The list of Case records to be inserted.

 */
private static void saveCases(List<Case> casesToInsert) {
    Database.SaveResult[] saveResults = Database.insert(casesToInsert, false, AccessLevel.USER_MODE);

    String errorMsg = '';
    for (Database.SaveResult saveResult : saveResults) {
        if (!saveResult.isSuccess()) {
            for (Database.Error error : saveResult.getErrors()) {
                errorMsg += 'Error ' + error.getFields() + '--' + error.getMessage() + '\n';
            }
        }
    }

    if (String.isNotBlank(errorMsg)) {
        BI_PSPB_LogUtilities.logError(BI_PSPB_ProfileManagerConstCtrl.insertError, BI_PSPB_CaseDeletionCtrl.class.toString());
    }
}

  /**
 * @description Retrieves the checkbox values for a given case record.
 * This method is used in the biPspbPatientProfiledetails and biPspbCgPatientinfo LWC components.
 * @param relatedAccounts The Id of the related account.
 * @return The Case record containing checkbox values. Returns null if no case record is found or if an error occurs.
 */
@AuraEnabled(cacheable=true)
public static Case checkboxAccountDeletion(String relatedAccounts) {
    Case casesRecord = null; // Initialize the variable to null

    try {
        // Check if relatedAccounts is provided
        if (String.isNotBlank(relatedAccounts)) {
            // Define query fields and conditions
            String sObjectType = 'Case';
            String accountRecord='relatedAccounts';
            String fields = 'Id, BI_PSP_Personal_Information_Request__c, BI_PSP_Account_Deletion_Request__c';
            // Use the relatedAccounts parameter directly in the conditions string
            String conditions = 'AccountId = \'' + accountRecord + 
                                '\' AND BI_PSP_Type__c = \'' + BI_PSPB_ProfileManagerConstCtrl.deletionReq + '\'';
            Boolean withUserMode = true;
            
            // Execute the query using the common query method
            List<SObject> result = BI_PSP_CommonQueryUtility.executeQuery(sObjectType, fields, conditions, withUserMode);

            // Check if results are returned and cast the first result
            if (!result.isEmpty()) {
                casesRecord = (Case)result[0];
            }
        } else {
            // Log an error if relatedAccounts is not provided
            BI_PSP_LogMessagesUtility.logError(
                BI_PSPB_ProfileManagerConstCtrl.caseDelete,
                BI_PSPB_CaseCtrl_Deletion.class.toString(),
                FALSE,
                BI_SFCOE_LOG_Util.LOG_SEVERITY_ERROR
            );
        }

        // Log an error if no case record is found
        if (casesRecord == null) {
            BI_PSP_LogMessagesUtility.logError(
                BI_PSPB_CaseCtrl_Deletion.class.toString(),
                BI_PSPB_ProfileManagerConstCtrl.caseDelete,
                FALSE,
                BI_PSPB_ProfileManagerConstCtrl.LOG_SEVERITY_ERROR
            );
        }
    } catch (Exception ex) {
        // Log any exceptions that occur
        BI_PSPB_LogUtilities.exceptionLogMessage(
            BI_PSPB_ProfileManagerConstCtrl.caseDelete,
            BI_PSPB_CaseCtrl_Deletion.class.toString(),
            ex
        );
    }
    
    return casesRecord;
}



}