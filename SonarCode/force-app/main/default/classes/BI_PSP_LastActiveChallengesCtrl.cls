/**
@description Class used for retrieving care programm erolle with challenges associated 
and updating challenges related values.
Reason for using whithout sharing is we use Care Program Enrollee, 
which is a Health Cloud object;
hence, we cannot utilize user mode here.
History:
Version    Author      Date              Detail         Description
1.0        Nandha      25-7-2023        Created        Initial development 
 
*/
public without sharing class BI_PSP_LastActiveChallengesCtrl {
 /*
    @description Method to retrieve the last active challenge for a given enrollee.
    @param enrolleId The ID of the enrollee for whom to retrieve the last active challenge.
    @return HealthCloudGA__CarePlanTemplate__c The last active challenge.
    */


@AuraEnabled(cacheable=true)
    public static HealthCloudGA__CarePlanTemplate__c getLastActiveChallenges(String enrolleId) {
        HealthCloudGA__CarePlanTemplate__c retrievedCarePlanTemplate = new HealthCloudGA__CarePlanTemplate__c();
        try {
            if (String.isBlank(enrolleId)) {
                logErrorAndThrowException();
            }

            Id awardRecordType = getAwardRecordTypeId();
            Award lastActiveAward = getLastActiveAward(enrolleId, awardRecordType);

            if (lastActiveAward == null) {
                return null;
            }

            HealthCloudGA__CareProgramPlanTemplate__c careProgramPlanTemplate = getCareProgramPlanTemplate(lastActiveAward.BI_PSP_Care_Program_Plan_Template__c);

            if (careProgramPlanTemplate == null) {
                throw new AuraHandledException(BI_PSP_ChallengeConstantCtrl.challengesErrorMessage);
            }

            retrievedCarePlanTemplate = getCarePlanTemplate(careProgramPlanTemplate.HealthCloudGA__CarePlanTemplate__r.Id);

            // if (retrievedCarePlanTemplate == null) {
            //     throw new AuraHandledException(BI_PSP_ChallengeConstantCtrl.challengesErrorMessage);
            // }

        } catch (Exception ex) {
            BI_PSPB_LogUtilities.exceptionLogMessage(BI_PSP_ChallengeConstantCtrl.challengesErrorMessage, BI_PSP_ChallengeCtrl.class.toString(), ex);
        }
        return retrievedCarePlanTemplate;
    }
/*
    @description Method to retrieve the RecordTypeId for the Award object.
    @return Id of the Award RecordType.
    */
    private static Id getAwardRecordTypeId() {
        return Schema.SObjectType.Award.getRecordTypeInfosByName()
            .get(System.label.BI_PSP_Challenge)
            .getRecordTypeId();
    }
/*
    @description Method to retrieve the last active Award record for a given enrollee.
    @param enrolleId The ID of the enrollee for whom to retrieve the last active Award.
    @param awardRecordType The RecordTypeId of the Award object.
    @return Award The last active Award record.
    */
    private static Award getLastActiveAward(String enrolleId, Id awardRecordType) {
        String sObjectType = 'Award';
        String fields = 'Id, BI_PSP_Care_Program_Plan_Template__c, BI_PSP_Care_Program_Enrollee__c';
        String conditions = 'RecordTypeId = \'' + awardRecordType + '\' AND BI_PSP_Care_Program_Enrollee__c = \'' + enrolleId + '\' AND BI_PSP_Status__c = \'' + BI_PSP_ChallengeConstantCtrl.challengeActive + '\'';
        Boolean withSharingKeywrd = false;

        List<SObject> results = BI_PSP_CommonQueryUtility.executeQuery(sObjectType, fields, conditions, withSharingKeywrd);

        if (results.isEmpty()) {
            return null;
        }

        // Type casting
        return (Award) results[0];
    }
/*
    @description Method to retrieve the CareProgramPlanTemplate record based on the provided careProgramPlanTemplateId.
    @param careProgramPlanTemplateId The Id of the CareProgramPlanTemplate record.
    @return HealthCloudGA__CareProgramPlanTemplate__c record.
    */
    private static HealthCloudGA__CareProgramPlanTemplate__c getCareProgramPlanTemplate(Id careProgramPlanTemplateId) {
        String sObjectType = 'HealthCloudGA__CareProgramPlanTemplate__c';
        String fields = 'Id, HealthCloudGA__CareProgram__c, HealthCloudGA__CarePlanTemplate__r.Id';
        String conditions = 'Id = \'' + careProgramPlanTemplateId + '\'';
        Boolean withSharingKeywrd = false;

        List<SObject> results = BI_PSP_CommonQueryUtility.executeQuery(sObjectType, fields, conditions, withSharingKeywrd);

        if (results.isEmpty()) {
            return null;
        }

        // Type casting
        return (HealthCloudGA__CareProgramPlanTemplate__c) results[0];
    }
/*
    @description Method to retrieve the CarePlanTemplate record based on the provided carePlanTemplateId.
    @param carePlanTemplateId The Id of the CarePlanTemplate record.
    @return HealthCloudGA__CarePlanTemplate__c record.
    */
    private static HealthCloudGA__CarePlanTemplate__c getCarePlanTemplate(Id carePlanTemplateId) {
        String sObjectType = 'HealthCloudGA__CarePlanTemplate__c';
        String fields = 'Id, BI_PSP_Challenge_Reward_Points__c, Name, HealthCloudGA__Description__c, BI_PSP_Challenge_Level__c, BI_PSP_Challenge_Image__c';
        String conditions = 'Id = \'' + carePlanTemplateId + '\' AND Name != NULL';
        Boolean withSharingKeywrd = false;

        List<SObject> results = BI_PSP_CommonQueryUtility.executeQuery(sObjectType, fields, conditions, withSharingKeywrd);

        if (results.isEmpty()) {
            return null;
        }

        // Type casting
        return (HealthCloudGA__CarePlanTemplate__c) results[0];
    }
 /*
    @description Method to log error and throw an AuraHandledException with a specific error message.
    */
    private static void logErrorAndThrowException() {
        BI_SFCOE_LOG_Util.logMessage(
            BI_PSP_ChallengeConstantCtrl.applicationName,
            BI_PSP_ChallengeCtrl.class.toString(),
            '',
            System.now(),
            BI_PSP_ChallengeConstantCtrl.enrolleeCaregiverErrorMessage,
            BI_SFCOE_LOG_Util.LOG_SEVERITY_ERROR
        );
        throw new AuraHandledException(BI_PSP_ChallengeConstantCtrl.challengesErrorMessage);
    }



}